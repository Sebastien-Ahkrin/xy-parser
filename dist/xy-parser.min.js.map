{"version":3,"file":"xy-parser.min.js","sources":["../lib/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param {object} [points={}] : Object of points contains property x (an array) and y (an array)\n * @return points\n */\n\nfunction uniqueX(points = {}) {\n  const { x, y } = points;\n  if (x.length < 2) return;\n  if (x.length !== y.length) {\n    throw new Error('The X and Y arrays mush have the same length');\n  }\n\n  let current = x[0];\n  let counter = 0;\n\n  for (let i = 1; i < x.length; i++) {\n    if (current !== x[i]) {\n      counter++;\n      current = x[i];\n      x[counter] = x[i];\n      if (i !== counter) {\n        y[counter] = 0;\n      }\n    }\n    if (i !== counter) {\n      y[counter] += y[i];\n    }\n  }\n\n  x.length = counter + 1;\n  y.length = counter + 1;\n}\n\n/**\n * Parse a text-file and convert it to an array of XY points\n * @param {string} text - csv or tsv strings\n * @param {object} [options={}]\n * @param {boolean} [options.rescale = false] - will set the maximum value to 1\n * @param {boolean} [options.uniqueX = false] - Make the X values unique (works only with 'xxyy' format). If the X value is repeated the sum of Y is done.\n * @param {number} [options.xColumn = 0] - A number that specifies the x column\n * @param {number} [options.yColumn = 1] - A number that specifies the y column\n * @param {number} [options.maxNumberColumns = (Math.max(xColumn, yColumn)+1)] - A number that specifies the maximum number of y columns\n * @param {number} [options.minNumberColumns = (Math.min(xColumn, yColumn)+1)] - A number that specifies the minimum number of y columns\n * @param {boolean} [options.keepInfo = false] - shoud we keep the non numeric lines. In this case the system will return an object {data, info}\n * @return {object{x:<Array<number>>,y:<Array<number>>}\n */\nfunction parseXY(text, options = {}) {\n  let {\n    rescale = false,\n    uniqueX: uniqueX$1 = false,\n    xColumn = 0,\n    yColumn = 1,\n    keepInfo = false,\n    maxNumberColumns = Number.MAX_SAFE_INTEGER,\n    minNumberColumns = 2,\n  } = options;\n\n  maxNumberColumns = Math.max(maxNumberColumns, xColumn + 1, yColumn + 1);\n  minNumberColumns = Math.max(xColumn + 1, yColumn + 1, minNumberColumns);\n\n  let lines = text.split(/[\\r\\n]+/);\n\n  let maxY = Number.MIN_VALUE;\n  let result = { x: [], y: [] };\n  let info = [];\n  for (let l = 0; l < lines.length; l++) {\n    let line = lines[l].trim();\n    // we will consider only lines that contains only numbers\n    if (line.match(/[0-9]+/) && line.match(/^[0-9eE,;. \\t+-]+$/)) {\n      let fields = line.split(/,[; \\t]+|[; \\t]+/);\n      if (fields.length === 1) {\n        fields = line.split(/[,; \\t]+/);\n      }\n      if (\n        fields &&\n        fields.length >= minNumberColumns &&\n        fields.length <= maxNumberColumns\n      ) {\n        let x = parseFloat(fields[xColumn].replace(',', '.'));\n        let y = parseFloat(fields[yColumn].replace(',', '.'));\n\n        if (y > maxY) maxY = y;\n        result.x.push(x);\n        result.y.push(y);\n      }\n    } else if (line) {\n      info.push({ position: result.x.length, value: line });\n    }\n  }\n\n  if (uniqueX$1) {\n    uniqueX(result);\n  }\n\n  if (rescale) {\n    for (let i = 0; i < result.y.length; i++) {\n      result.y[i] /= maxY;\n    }\n  }\n\n  if (!keepInfo) return result;\n\n  return {\n    info,\n    data: result,\n  };\n}\n\nexports.parseXY = parseXY;\n"],"names":["Object","defineProperty","exports","value","text","options","rescale","uniqueX","uniqueX$1","xColumn","yColumn","keepInfo","maxNumberColumns","Number","MAX_SAFE_INTEGER","minNumberColumns","Math","max","lines","split","maxY","MIN_VALUE","result","x","y","info","l","length","line","trim","match","fields","parseFloat","replace","push","position","points","Error","current","counter","i","data"],"mappings":"yRAEAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IA+GtDD,mBA9DiBE,OAAMC,yDAAU,IAC3BC,QACFA,GAAU,EACVC,QAASC,GAAY,EAFnBC,QAGFA,EAAU,EAHRC,QAIFA,EAAU,EAJRC,SAKFA,GAAW,EALTC,iBAMFA,EAAmBC,OAAOC,iBANxBC,iBAOFA,EAAmB,GACjBV,EAEJO,EAAmBI,KAAKC,IAAIL,EAAkBH,EAAU,EAAGC,EAAU,GACrEK,EAAmBC,KAAKC,IAAIR,EAAU,EAAGC,EAAU,EAAGK,OAElDG,EAAQd,EAAKe,MAAM,WAEnBC,EAAOP,OAAOQ,UACdC,EAAS,CAAEC,EAAG,GAAIC,EAAG,IACrBC,EAAO,OACN,IAAIC,EAAI,EAAGA,EAAIR,EAAMS,OAAQD,IAAK,KACjCE,EAAOV,EAAMQ,GAAGG,UAEhBD,EAAKE,MAAM,WAAaF,EAAKE,MAAM,sBAAuB,KACxDC,EAASH,EAAKT,MAAM,uBACF,IAAlBY,EAAOJ,SACTI,EAASH,EAAKT,MAAM,aAGpBY,GACAA,EAAOJ,QAAUZ,GACjBgB,EAAOJ,QAAUf,EACjB,KACIW,EAAIS,WAAWD,EAAOtB,GAASwB,QAAQ,IAAK,MAC5CT,EAAIQ,WAAWD,EAAOrB,GAASuB,QAAQ,IAAK,MAE5CT,EAAIJ,IAAMA,EAAOI,GACrBF,EAAOC,EAAEW,KAAKX,GACdD,EAAOE,EAAEU,KAAKV,SAEPI,GACTH,EAAKS,KAAK,CAAEC,SAAUb,EAAOC,EAAEI,OAAQxB,MAAOyB,OAI9CpB,kBArFW4B,yDAAS,SAClBb,EAAEA,EAAFC,EAAKA,GAAMY,KACbb,EAAEI,OAAS,EAAG,UACdJ,EAAEI,SAAWH,EAAEG,aACX,IAAIU,MAAM,oDAGdC,EAAUf,EAAE,GACZgB,EAAU,MAET,IAAIC,EAAI,EAAGA,EAAIjB,EAAEI,OAAQa,IACxBF,IAAYf,EAAEiB,KAChBD,IACAD,EAAUf,EAAEiB,GACZjB,EAAEgB,GAAWhB,EAAEiB,GACXA,IAAMD,IACRf,EAAEe,GAAW,IAGbC,IAAMD,IACRf,EAAEe,IAAYf,EAAEgB,IAIpBjB,EAAEI,OAASY,EAAU,EACrBf,EAAEG,OAASY,EAAU,EA6DnBhC,CAAQe,GAGNhB,MACG,IAAIkC,EAAI,EAAGA,EAAIlB,EAAOE,EAAEG,OAAQa,IACnClB,EAAOE,EAAEgB,IAAMpB,SAIdT,EAEE,CACLc,KAAAA,EACAgB,KAAMnB,GAJcA"}