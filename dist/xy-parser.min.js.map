{"version":3,"sources":["xy-parser.min.js"],"names":["e","exports","module","define","amd","f","window","global","self","xyParser","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"parse","text","options","lines","split","maxY","Number","MIN_VALUE","result","line","match","fields","x","parseFloat","y","push","normalize"],"mappings":"CAMC,SAASA,GAAG,GAAG,gBAAiBC,UAAS,mBAAoBC,QAAOA,OAAOD,QAAQD,QAAS,IAAG,kBAAmBG,SAAQA,OAAOC,IAAID,UAAUH,OAAO,CAAC,GAAIK,EAAE,oBAAoBC,QAAOD,EAAEC,OAAO,mBAAoBC,QAAOF,EAAEE,OAAO,mBAAoBC,QAAOH,EAAEG,MAAMH,EAAEI,SAAST,MAAM,WAAqC,MAAO,SAAUA,GAAEU,EAAEC,EAAEC,GAAG,QAASC,GAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,GAAIE,GAAkB,kBAATC,UAAqBA,OAAQ,KAAIF,GAAGC,EAAE,MAAOA,GAAEF,GAAE,EAAI,IAAGI,EAAE,MAAOA,GAAEJ,GAAE,EAAI,IAAIT,GAAE,GAAIc,OAAM,uBAAuBL,EAAE,IAAK,MAAMT,GAAEe,KAAK,mBAAmBf,EAAE,GAAIgB,GAAEV,EAAEG,IAAIb,WAAYS,GAAEI,GAAG,GAAGQ,KAAKD,EAAEpB,QAAQ,SAASD,GAAG,GAAIW,GAAED,EAAEI,GAAG,GAAGd,EAAG,OAAOa,GAAEF,EAAEA,EAAEX,IAAIqB,EAAEA,EAAEpB,QAAQD,EAAEU,EAAEC,EAAEC,GAAG,MAAOD,GAAEG,GAAGb,QAAkD,IAAI,GAA1CiB,GAAkB,kBAATD,UAAqBA,QAAgBH,EAAE,EAAEA,EAAEF,EAAEW,OAAOT,IAAID,EAAED,EAAEE,GAAI,OAAOD,KAAKW,GAAG,SAASP,EAAQf,EAAOD,GAC7xB,YAEAC,GAAOD,QAAQwB,MAAQ,SAAUC,EAAMC,GAMnC,IAAK,GALDA,GAAUA,MACVC,EAAQF,EAAKG,MAAM,WAEnBC,EAAOC,OAAOC,UACdC,KACKf,EAAI,EAAGA,EAAIU,EAAML,OAAQL,IAAK,CACnC,GAAIgB,GAAON,EAAMV,EAEjB,IAAIgB,EAAKC,MAAM,WAAaD,EAAKC,MAAM,sBAAuB,CAC1D,GAAIC,GAASF,EAAKL,MAAM,WACxB,IAAIO,GAA2B,GAAjBA,EAAOb,OAAa,CAC9B,GAAIc,GAAIC,WAAWF,EAAO,IACtBG,EAAID,WAAWF,EAAO,GACtBG,GAAIT,IAAMA,EAAOS,GACrBN,EAAOO,MAAMH,EAAGE,MAK5B,GAAIZ,EAAQc,UAAW,CACnBX,GAAQ,GACR,KAAK,GAAIZ,GAAI,EAAGA,EAAIe,EAAOV,OAAQL,IAC/Be,EAAOf,GAAG,IAAMY,EAIxB,MAAOG,cAGA,IAAI","file":"xy-parser.min.js","sourcesContent":["/**\n * xy-parser - Parse a text-file and convert it to an array of XY points\n * @version v1.0.0\n * @link https://github.com/cheminfo-js/xy-parser\n * @license MIT\n */\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.xyParser=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nmodule.exports.parse = function (text, options) {\n    var options = options || {};\n    var lines = text.split(/[\\r\\n]+/);\n\n    var maxY = Number.MIN_VALUE;\n    var result = [];\n    for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        // we will consider only lines that contains only numbers\n        if (line.match(/[0-9]+/) && line.match(/^[0-9eE,;\\. \\t-]+$/)) {\n            var fields = line.split(/[,; \\t]+/);\n            if (fields && fields.length == 2) {\n                var x = parseFloat(fields[0]);\n                var y = parseFloat(fields[1]);\n                if (y > maxY) maxY = y;\n                result.push([x, y]);\n            }\n        }\n    }\n\n    if (options.normalize) {\n        maxY /= 100;\n        for (var i = 0; i < result.length; i++) {\n            result[i][1] /= maxY;\n        }\n    }\n\n    return result;\n};\n\n},{}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}